This is a binary diff/patch program, meant to deal with an entire tree of files.

It's mostly an experiment right now; check out [Jarsync](http://github.com/csm/Jarsync) if you're interested in
something a little more useful.

## Checksum file format

All values written according to the `DataInputStream`/`DataOutputStream` format.

* 8 magic bytes 'TDsums' + 2 byte version, current version == 0x0001.
* Strong sum algorithm, UTF-8 (e.g. "Murmur3").
* Strong sum length, 4 byte integer.

Then, a list of sum commands:

* Byte 'r', a root path.
    * The absolute file path, UTF-8.
* Byte 'f', a regular file.
    * Owner name, UTF-8.
    * Group name, UTF-8.
    * Permission bit set (like UNIX).
    * Created time, 8 byte long in seconds.
    * Modified time, 8 byte long in seconds.
    * File length, 8 byte long.
    * Absolute file path, UTF-8.
    * Block length, 4 byte integer.
    * Sequence of sums:
        * Byte 's'.
        * Weak checksum, 4 byte integer.
        * Strong checksum, "strong sum length" bytes long.
        * File offset, 8 byte long.
        * Length, 8 bytes long.
    * Followed by byte 'i', and a 16 byte MD5 hash of the entire file.
    * Followed by byte 0.
* Byte 'l', a symbolic link.
    * Owner name, UTF-8.
    * Group name, UTF-8.
    * Permission bit set (like UNIX).
    * Created time, 8 byte long in seconds.
    * Modified time, 8 byte long in seconds.
    * File length, 8 byte long.
    * Absolute file path, UTF-8.
    * Link target, UTF-8.
* Byte 'd', a directory.
    * Owner name, UTF-8.
    * Group name, UTF-8.
    * Permission bit set (like UNIX).
    * Created time, 8 byte long in seconds.
    * Modified time, 8 byte long in seconds.
    * File length, 8 byte long.
    * Absolute file path, UTF-8.

The command list ends at the end of the file.

## Diff file format.

* 8 magic bytes `'TDdiff'` + 2 byte version, current version == 0x0001.
* Strong sum algorithm, UTF-8.
* Strong sum length, 4 byte integer.

Then, a list of commands:

* Byte 'p', a "patch" command.
    * Owner name, UTF-8.
    * Group name, UTF-8.
    * Permission bit set (like UNIX).
    * Created time, 8 byte long in seconds.
    * Modified time, 8 byte long in seconds.
    * File length, 8 byte long.
    * Absolute file path, UTF-8.
    * Then, a list of patch commands:
        * Byte 'o', a copy command.
            * 4 byte integer, block length.
            * 8 byte integer, original offset.
            * 8 byte integer, new offset.
        * Byte 'd', a "data" command.
            * 4 byte integer, data length.
            * 8 byte integer, file offset.
            * `length` bytes.
* Byte 'D', create or overwrite with a directory
    * Owner name, UTF-8.
    * Group name, UTF-8.
    * Permission bit set (like UNIX).
    * Created time, 8 byte long in seconds.
    * Modified time, 8 byte long in seconds.
    * File length, 8 byte long.
    * Absolute file path, UTF-8.
* Byte 'L', create or overwrite with a symbolic link.
    * Owner name, UTF-8.
    * Group name, UTF-8.
    * Permission bit set (like UNIX).
    * Created time, 8 byte long in seconds.
    * Modified time, 8 byte long in seconds.
    * File length, 8 byte long.
    * Absolute file path, UTF-8.
    * Link target, UTF-8
* Byte 'F', write a new file.
    * Owner name, UTF-8.
    * Group name, UTF-8.
    * Permission bit set (like UNIX).
    * Created time, 8 byte long in seconds.
    * Modified time, 8 byte long in seconds.
    * File length, 8 byte long.
    * Absolute file path, UTF-8.
    * "File length" bytes.
* Byte 'X', delete file/directory.
    * Absolute path to delete, UTF-8.